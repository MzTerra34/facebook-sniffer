<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:db="http://www.mulesoft.org/schema/mule/db" 
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<flow processingStrategy="synchronous"  name="processPagePosts" tracking:enable-default-events="true">
        <vm:inbound-endpoint exchange-pattern="one-way" path="processPagePosts" doc:name="receive message"/>
        <logger level="INFO" doc:name="Log nextPage QueryParams" message="#[flow.name] id=#[message.inboundProperties.'pageId'] queryParams=#[message.inboundProperties.'nextPageQueryString']"/>
<!--         <tracking:transaction id="processPagePosts-pageId(#[message.inboundProperties['pageId']])-pageNo(#[message.inboundProperties['pageCount']])"/> -->
        <expression-component doc:name="set flowVars"><![CDATA[flowVars.pageId = message.inboundProperties.'pageId';
flowVars.pageName = message.inboundProperties.pageName;
flowVars.pageCount = message.inboundProperties.pageCount + 1;
flowVars.postResultsPageNumber = flowVars.pageCount;
flowVars.resultsPageNumber = message.inboundProperties.pageCount;
]]></expression-component>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.'nextPageQueryString' == null]">
                <http:request config-ref="HTTP_Facebook_API" path="/v2.3/{page_id}/feed" method="GET" doc:name="Get first page of posts">
                    <http:request-builder>
                        <http:query-param paramName="limit" value="250"/>
                        <http:query-param paramName="since" value="#[sessionVars.startDate]"/>
                        <http:query-param paramName="until" value="#[sessionVars.endDate]"/>
                        <http:query-param paramName="date_format" value="${facebook.api.date_format}"/>
                        <http:uri-param paramName="page_id" value="#[payload.id]"/>
                        <http:header headerName="Authorization" value="Bearer ${facebook.api.access_token}"/>
                    </http:request-builder>
                </http:request>
                <logger message="#[flow.name] getFirstPage #[payload]" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <http:request config-ref="HTTP_Facebook_API" path="/v2.3/{page_id}/feed?#[message.inboundProperties.'nextPageQueryString']" method="GET" doc:name="Get next page of posts">
                    <http:request-builder>
                        <http:uri-param paramName="page_id" value="#[message.inboundProperties.'pageId']"/>
                        <http:header headerName="Authorization" value="Bearer ${facebook.api.access_token}"/>
<!--                         <http:query-params expression="#[message.inboundProperties.'queryString']"/> -->
                    </http:request-builder>
                </http:request>
                <logger message="#[flow.'name'] getNextPage" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <choice doc:name="Choice">
            <when expression="#[payload.data != empty]">
                <set-property propertyName="nextPageQueryString" value="#[payload.paging.?next.substring(payload.paging.next.indexOf('?')+1)]" doc:name="save nextPage info"/>
                <set-payload value="#[payload.'data']" doc:name="Extract collection"/>
                <set-variable variableName="pageSize" value="#[payload.size()]" doc:name="save pageSize"/>
                <tracking:custom-event event-name="pageInfo" doc:name="Custom Business Event">
                    <tracking:meta-data key="startDate" value="#[sessionVars.startDate]"/>
                    <tracking:meta-data key="endDate" value="#[sessionVars.endDate]"/>
                    <tracking:meta-data key="pageId" value="#[flowVars.pageId]"/>
                    <tracking:meta-data key="pageName" value="#[flowVars.pageName]"/>
                    <tracking:meta-data key="postResultsPageNumber" value="#[flowVars.pageCount]"/>
                    <tracking:meta-data key="postCountForResultsPage" value="#[flowVars.pageSize]"/>
                </tracking:custom-event>
                <foreach doc:name="For Each Page Post">
                    <message-properties-transformer doc:name="Message Properties">
                        <add-message-property key="postId" value="#[payload.from.id]"/>
                        <add-message-property key="postResultsPageNumber" value="#[flowVars.postResultsPageNumber]"/>
                    </message-properties-transformer>
                    <flow-ref name="processPagePost" doc:name="processPagePost"/>
                </foreach>
                <logger message="#[flow.name] PAGE #[flowVars.'pageCount']: #[flowVars['pageName']] processed #[flowVars.pageSize] posts.  NextPage=#[message.outboundProperties.?nextPage == null]" level="INFO" doc:name="Logger"/>
                <set-variable variableName="flowName" value="#['processPagePosts']" doc:name="set flowName"/>
                <flow-ref name="getNextPage" doc:name="getNextPage"/>
            </when>
            <otherwise>
                <logger message="#[flow.name] no more pages for page #[flowVars.pageName] (#[flowVars.pageId])" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
			<logger message="Invalid JSON" level="INFO" doc:name="Logger" />
		</catch-exception-strategy>
	</flow>
	<flow name="processPagePost" tracking:enable-default-events="true">
<!--         <tracking:transaction id="processPagePost-pageId(#[flowVars['pageId']])-pageNo(#[flowVars['pageCount']])-postId-#[payload.id]"/>	 -->
         <message-properties-transformer doc:name="Message Properties">
             <add-message-property key="parentId" value="#[payload.id]"/>
            <add-message-property key="pageCount" value="#[0]"/>
            <add-message-property key="pageId" value="#[flowVars['pageId']]"/>
            <add-message-property key="pageName" value="#[flowVars['pageName']]"/>
            <add-message-property key="startDate" value="#[sessionVars.startDate]"/>
            <add-message-property key="endDate" value="#[sessionVars.endDate]"/>
         </message-properties-transformer>
<scatter-gather doc:name="Scatter-Gather">
             <processor-chain>
                 <set-variable variableName="post" value="#[payload]" doc:name="Save post record"/>
                <tracking:custom-event event-name="pageInfo" doc:name="Custom Business Event">
                    <tracking:meta-data key="startDate" value="#[sessionVars.startDate]"/>
                    <tracking:meta-data key="endDate" value="#[sessionVars.endDate]"/>
                    <tracking:meta-data key="pageId" value="#[flowVars.pageId]"/>
                    <tracking:meta-data key="pageName" value="#[flowVars.pageName]"/>
                    <tracking:meta-data key="postResultsPageNumber" value="#[flowVars.pageCount]"/>
                    <tracking:meta-data key="resultsPageIndex" value="#[flowVars.counter]"/>
                    <tracking:meta-data key="postId" value="#[payload.id]"/>
                    <tracking:meta-data key="created_time" value="#[payload.created_time]"/>
                    <tracking:meta-data key="updated_time" value="#[payload.updated_time]"/>
                </tracking:custom-event>
                 <db:update config-ref="MySQL_Configuration" doc:name="UPDATE post">
                    <db:parameterized-query><![CDATA[UPDATE `facebook`.`post` set
`fromId` = #[payload.from.id]
, `story` = #[payload['story']]
, `created_time` = #[payload['created_time']]
, `updated_time` = #[payload['updated_time']]
, `is_published` = #[payload['is_published']]
, `caption` = #[payload['caption']]
, `userId` = #[payload.from.id]
, `application` = #[payload['application']]
, `description` = #[payload['description']]
, `feed_targeting` = #[payload['feed_targeting']]
, `is_hidden` = #[payload['is_hidden']]
, `link` = #[payload['link']]
, `message` = #[payload['message']]
, `message_tags` = #[payload['message_tags']]
, `name` = #[payload['name']]
, `objectId` = #[payload['objectId']]
, `picture` = #[payload['picture']]
, `place` = #[payload['place']]
, `privacy` = #[payload['privacy']]
, `properties` = #[payload['properties']]
, `source` = #[payload['source']]
, `status_type` = #[payload['status_type']]
, `to` = #[payload['to']]
, `type` = #[payload['type']]
, `withTags` = #[payload['withTags']]
, `pull_dateTime` = #[sessionVars.syncDateForDb]
WHERE `postId` = #[payload['id']] ;]]></db:parameterized-query>
             </db:update>
             <choice doc:name="Choice">
                 <when expression="#[payload == 0]">
                     <set-payload value="#[flowVars.post]" doc:name="Reset payload"/>
                     <db:insert config-ref="MySQL_Configuration" doc:name="INSERT post">
                            <db:parameterized-query><![CDATA[INSERT INTO `facebook`.`post` (`postId`, `fromId`, `story`, `created_time`, `updated_time`, `is_published`, `caption`, `userId`, `application`, `description`, `feed_targeting`, `is_hidden`, `link`, `message`, `message_tags`, `name`, `objectId`, `picture`, `place`, `privacy`, `properties`, `source`, `status_type`, `to`, `type`, `withTags`, `pull_dateTime`) VALUES (#[payload['id']], #[payload['fromId']], #[payload['story']],#[payload['created_time']],#[payload['updated_time']], #[payload['is_published']], #[payload['caption']], #[payload['userId']], #[payload['application']], #[payload['description']], #[payload['feed_targeting']], #[payload['is_hidden']], #[payload['link']], #[payload['message']], #[payload['message_tags']], #[payload['name']], #[payload['objectId']], #[payload['picture']], #[payload['place']], #[payload['privacy']], #[payload['properties']], #[payload['source']], #[payload['status_type']], #[payload['to']], #[payload['type']], #[payload['withTags']], #[flowVars.sync_date]);]]></db:parameterized-query>
                         </db:insert>
                         <logger message="#[flow.name] #[flowVars.'pageName'] #[flowVars.postResultsPageNumber].#[flowVars.counter] INSERT postId (#[flowVars['post'].'id']) #[flowVars.'post'.['from'].'name'] created on #[flowVars['post'].'created_time'] updated #[flowVars['post'].'updated_time']" level="INFO" doc:name="Logger"/>
                        <message-properties-transformer doc:name="Message Properties">
                            <add-message-property key="userId" value="#[flowVars.'post'.from.id]"/>
                        </message-properties-transformer>
                         <vm:outbound-endpoint exchange-pattern="one-way" path="user" doc:name="Drop on user queue"/>
                     </when>
                     <otherwise>
                         <logger message="#[flow.name] #[flowVars.'pageName'] #[flowVars.postResultsPageNumber].#[flowVars.counter] UPDATE postId (#[flowVars['post'].'id']) from #[flowVars.'post'.['from'].'name'] created on #[flowVars['post'].'created_time'] updated #[flowVars['post'].'updated_time']" level="INFO" doc:name="Logger"/>
                     </otherwise>
                 </choice>
             </processor-chain>
            <processor-chain>
                <set-property propertyName="objectType" value="comment" doc:name="Property"/>
                <vm:outbound-endpoint exchange-pattern="one-way" path="processEdge" doc:name="process post comments"/>
            </processor-chain>
            <processor-chain>
                <set-property propertyName="objectType" value="like" doc:name="Property"/>
                <vm:outbound-endpoint exchange-pattern="one-way" path="processEdge" doc:name="process post likes"/>
            </processor-chain>
</scatter-gather>
	</flow>
</mule>
